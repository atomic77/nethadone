// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package handlers

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTrafficmon returns the embedded CollectionSpec for trafficmon.
func loadTrafficmon() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TrafficmonBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load trafficmon: %w", err)
	}

	return spec, err
}

// loadTrafficmonObjects loads trafficmon and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*trafficmonObjects
//	*trafficmonPrograms
//	*trafficmonMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTrafficmonObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTrafficmon()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// trafficmonSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficmonSpecs struct {
	trafficmonProgramSpecs
	trafficmonMapSpecs
}

// trafficmonSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficmonProgramSpecs struct {
	TrafficMon *ebpf.ProgramSpec `ebpf:"traffic_mon"`
}

// trafficmonMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trafficmonMapSpecs struct {
	SrcDestBytes *ebpf.MapSpec `ebpf:"src_dest_bytes"`
}

// trafficmonObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTrafficmonObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficmonObjects struct {
	trafficmonPrograms
	trafficmonMaps
}

func (o *trafficmonObjects) Close() error {
	return _TrafficmonClose(
		&o.trafficmonPrograms,
		&o.trafficmonMaps,
	)
}

// trafficmonMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTrafficmonObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficmonMaps struct {
	SrcDestBytes *ebpf.Map `ebpf:"src_dest_bytes"`
}

func (m *trafficmonMaps) Close() error {
	return _TrafficmonClose(
		m.SrcDestBytes,
	)
}

// trafficmonPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTrafficmonObjects or ebpf.CollectionSpec.LoadAndAssign.
type trafficmonPrograms struct {
	TrafficMon *ebpf.Program `ebpf:"traffic_mon"`
}

func (p *trafficmonPrograms) Close() error {
	return _TrafficmonClose(
		p.TrafficMon,
	)
}

func _TrafficmonClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed trafficmon_bpfel.o
var _TrafficmonBytes []byte
