// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package handlers

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadThrottle returns the embedded CollectionSpec for throttle.
func loadThrottle() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ThrottleBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load throttle: %w", err)
	}

	return spec, err
}

// loadThrottleObjects loads throttle and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*throttleObjects
//	*throttlePrograms
//	*throttleMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadThrottleObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadThrottle()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// throttleSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type throttleSpecs struct {
	throttleProgramSpecs
	throttleMapSpecs
}

// throttleSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type throttleProgramSpecs struct {
	Throttle *ebpf.ProgramSpec `ebpf:"throttle"`
}

// throttleMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type throttleMapSpecs struct {
	ThrottleStats *ebpf.MapSpec `ebpf:"throttle_stats"`
}

// throttleObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadThrottleObjects or ebpf.CollectionSpec.LoadAndAssign.
type throttleObjects struct {
	throttlePrograms
	throttleMaps
}

func (o *throttleObjects) Close() error {
	return _ThrottleClose(
		&o.throttlePrograms,
		&o.throttleMaps,
	)
}

// throttleMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadThrottleObjects or ebpf.CollectionSpec.LoadAndAssign.
type throttleMaps struct {
	ThrottleStats *ebpf.Map `ebpf:"throttle_stats"`
}

func (m *throttleMaps) Close() error {
	return _ThrottleClose(
		m.ThrottleStats,
	)
}

// throttlePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadThrottleObjects or ebpf.CollectionSpec.LoadAndAssign.
type throttlePrograms struct {
	Throttle *ebpf.Program `ebpf:"throttle"`
}

func (p *throttlePrograms) Close() error {
	return _ThrottleClose(
		p.Throttle,
	)
}

func _ThrottleClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed throttle_bpfeb.o
var _ThrottleBytes []byte
